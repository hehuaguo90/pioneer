package com.tfrd.bdas.module.tSysArea.service.impl;

import javax.annotation.Resource;

import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import com.tfrd.common.utils.Constant;
import com.tfrd.common.utils.TreeModel;
import com.tfrd.bdas.module.tSysArea.service.TSysAreaService;
import com.tfrd.bdas.module.tSysArea.dao.TSysAreaDao;
import com.tfrd.bdas.module.tSysArea.model.TSysAreaModel;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;

import org.springframework.transaction.annotation.Transactional;

/**
* 数据服务层接口实现。
* TABLE CODE:	t_sys_area;
* TABLE NAME:	
* TABLE REMARK:	地区表
* code tools version V1.0,created on Fri Dec 02 11:48:33 CST 2016
*/
@Service(value="TSysAreaServiceImpl")
@Scope("prototype")
public class TSysAreaServiceImpl implements TSysAreaService{
    @Autowired
    private TSysAreaDao tSysAreaDao;

    Logger log4j = Logger.getLogger(TSysAreaServiceImpl.class);

    public List listBean(PageBounds page, Map    <String, Object> params)
    {
        return tSysAreaDao.listBean(page,params);
    }

    public List listBean(Map<String, Object> params)
    {
        return tSysAreaDao.listBean(params);
    }
    public List listMap(PageBounds page, Map<String, Object> params) {

        return tSysAreaDao.listMap(page,params);

    }
    public List listMap(Map<String, Object> params) {

        return tSysAreaDao.listMap(params);

    }

    public List searchListMap(Map<String, Object> params) {

        return tSysAreaDao.searchListMap(params);

    }
    public int save(TSysAreaModel o) {

        return tSysAreaDao.save(o);

    }

    @Transactional("dbTransaction")
    public int save(List<TSysAreaModel> list) {

        for (TSysAreaModel item : list)
        save(item);
        return list.size();
    }

    public Map getBeanMapById(TSysAreaModel o)
    {
        return tSysAreaDao.getBeanMapById(o);
    }

    public TSysAreaModel getBeanById(TSysAreaModel o) {


        return tSysAreaDao.getBeanById(o);

    }

    public boolean update(TSysAreaModel o) {
        tSysAreaDao.update(o);

        return true;
    }

    public boolean delete(TSysAreaModel[] items) {
        for(int i=0;items!=null&&i
        <items.length;i++)
        tSysAreaDao.delete(items[i]);
        return true;
    }
    
    public String getAreaTree(String areaLevel) {
		JSONArray tree = new JSONArray();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("areaLevel", areaLevel);
		List<Map<String, Object>> arealist = tSysAreaDao.listMapTree(params);

		if (arealist == null ) {
			tree.toString();
		}
		getTree(arealist, "0", tree);
		return tree.toString();
	}
    
    
    
	//树形结构
	private JSONArray getTree(List<Map<String, Object>> arealist, String pid, JSONArray tree) {
		for (Map<String, Object> p : arealist) {
			if (pid.equals(p.get("pid"))) {
				String id = p.get("areaId").toString();
				JSONObject pt = new JSONObject();
				pt.put("id", id);
				pt.put("text", p.get("shortName"));
				pt.put("code", p.get("areaCode"));
				pt.put("level", p.get("areaLevel"));
				pt.put("order", p.get("showOrder"));
				//if(Constant.CITY.equals(pid)){
				//	pt.put("state", "closed");
				//}
				JSONArray arr = new JSONArray();
				getTree(arealist, id, arr);//递归查询子节点
				if(!arr.isEmpty()){
					pt.put("children", arr);
				}
				
				tree.add(pt);
			}

		}
		return tree;
	}

	@SuppressWarnings("unchecked")
	@Override
	public String getAreaTrees(String areaLevel, String pid) {
		JSONArray tree = new JSONArray();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("areaLevel", areaLevel);
		params.put("pid", pid);
		
		List<Map<String, Object>> arealist = tSysAreaDao.getAreaTrees(params);

		if (arealist == null ) {
			tree.toString();
		}
		String pAreaName ="";
		if(StringUtils.isBlank(pid)){
			pid = "0";
		}else {
			TSysAreaModel item = new TSysAreaModel();
			item.setAreaId(pid);
			TSysAreaModel tSysAreaModel = tSysAreaDao.getBeanById(item);
			pAreaName=tSysAreaModel.getShortName();
		}
		
		getTrees(arealist, pid,pAreaName, tree);
		return tree.toString();
	}
	
	//树形结构
	private JSONArray getTrees(List<Map<String, Object>> arealist, String pid,String pAreaName, JSONArray tree) {
		for (Map<String, Object> p : arealist) {
			if (pid.equals(p.get("pid"))) {
				String id = p.get("id").toString();
				String areaLevel = p.get("areaLevel").toString();
				JSONObject pt = new JSONObject();
				pt.put("id", id);
				pt.put("text", p.get("text"));
				pt.put("pid", p.get("pid"));
				pt.put("code", p.get("areaCode"));
				pt.put("level", p.get("areaLevel"));
				pt.put("order", p.get("showOrder"));
				pt.put("levelName", p.get("levelName"));
				pt.put("pAreaName", pAreaName);
				//区县和乡镇级别关闭文件夹
				if(Constant.QXJ.equals(areaLevel) || Constant.XZJ.equals(areaLevel)){
					pt.put("state", "closed");
				}
				JSONArray arr = new JSONArray();
				getTrees(arealist, id,p.get("text").toString(), arr);//递归查询子节点
				if(!arr.isEmpty()){
					pt.put("children", arr);
				}
				tree.add(pt);
			}
		}
		return tree;
	}
}
